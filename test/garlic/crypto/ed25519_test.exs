defmodule Garlic.Crypto.Ed25519Test do
  use ExUnit.Case

  import Garlic.Crypto.Ed25519
  import Base

  test "raises an error when point is off the curve" do
    param = <<2, 0::size(31)-unit(8)>>

    assert_raise RuntimeError, "point off curve", fn ->
      "E19C65DE75C68CF3B7643EA732BA9EB1A3D20D6D57BA223C2ECE1DF66FEB5AF0"
      |> decode16!()
      |> blind_public_key(param)
    end
  end

  test "key blinding" do
    public_keys =
      [
        "C2247870536A192D142D056ABEFCA68D6193158E7C1A59C1654C954ECCAFF894",
        "1519A3B15816A1AAFAB0B213892026EBF5C0DC232C58B21088D88CB90E9B940D",
        "081FAA81992E360EA22C06AF1ABA096E7A73F1C665BC8B3E4E531C46455FD1DD",
        "73CFA1189A723AAD7966137CBFFA35140BB40D7E16EAE4C40B79B5F0360DD65A",
        "66C1A77104D86461B6F98F73ACF3CD229C80624495D2D74D6FDA1E940080A96B",
        "D21C294DB0E64CB2D8976625786EDE1D9754186AE8197A64D72F68C792EECC19",
        "C4D58B4CF85A348FF3D410DD936FA460C4F18DA962C01B1963792B9DCC8A6EA6",
        "95126F14D86494020665FACE03F2D42EE2B312A85BC729903EB17522954A1C4A",
        "95126F14D86494020665FACE03F2D42EE2B312A85BC729903EB17522954A1C4A",
        "95126F14D86494020665FACE03F2D42EE2B312A85BC729903EB17522954A1C4A"
      ]
      |> Enum.map(&decode16!/1)

    blinding_params =
      [
        "54A513898B471D1D448A2F3C55C1DE2C0EF718C447B04497EEB999ED32027823",
        "831E9B5325B5D31B7AE6197E9C7A7BAF2EC361E08248BCE055908971047A2347",
        "AC78A1D46FAF3BFBBDC5AF5F053DC6DC9023ED78236BEC1760DADFD0B2603760",
        "F9C84DC0AC31571507993DF94DA1B3D28684A12AD14E67D0A068ABA5C53019FC",
        "B1FE79D1DEC9BC108DF69F6612C72812755751F21ECC5AF99663B30BE8B9081F",
        "81F1512B63AB5FB5C1711A4EC83D379C420574AEDFFA8C3368E1C3989A3A0084",
        "97F45142597C473A4B0E9A12D64561133AD9E1155FE5A9807FE6AF8A93557818",
        "3F44F6A5A92CDE816635DFC12ADE70539871078D2FF097278BE2A555C9859CD0",
        "0000000000000000000000000000000000000000000000000000000000000000",
        "1111111111111111111111111111111111111111111111111111111111111111"
      ]
      |> Enum.map(&decode16!/1)

    blinded_public_keys =
      [
        "1FC1FA4465BD9D4956FDBDC9D3ACB3C7019BB8D5606B951C2E1DFE0B42EAEB41",
        "1CBBD4A88CE8F165447F159D9F628ADA18674158C4F7C5EAD44CE8EB0FA6EB7E",
        "C5419AD133FFDE7E0AC882055D942F582054132B092DE377D587435722DEB028",
        "3E08D0DC291066272E313014BFAC4D39AD84AA93C038478A58011F431648105F",
        "59381F06ACB6BF1389BA305F70874EED3E0F2AB57CDB7BC69ED59A9B8899FF4D",
        "2B946A484344EB1C17C89DD8B04196A84F3B7222C876A07A4CECE85F676F87D9",
        "C6B585129B135F8769DF2EBA987E76E089E80BA3A2A6729134D3B28008AC098E",
        "0EEFDC795B59CABBC194C6174E34BA9451E8355108520554EC285ACABEBB34AC",
        "312404D06A0A9DE489904B18D5233E83A50B225977FA8734F2C897A73C067952",
        "952A908A4A9E0E5176A2549F8F328955ACA6817A9FDC59E3ACEC5DEC50838108"
      ]
      |> Enum.map(&decode16!/1)

    for {public_key, blinding_param, blinded_public_key} <-
          Enum.zip([public_keys, blinding_params, blinded_public_keys]) do
      assert blind_public_key(public_key, blinding_param) == blinded_public_key
    end
  end
end
